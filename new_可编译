#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vector>
#include <algorithm>
#define max_line 1024     
#include <iostream>
#include<string>
#include <map>
#include<fstream>
#include <cstdio>
using namespace std;




int cut_levenshtein(char* str1, char* str2)
{
    int n, m;
    n = min(strlen(str1), strlen(str2));
    m = 0;
    for (int i = 0; i < n; i++) {
        if (str2[i] == str1[i] || (str2[i] == 'C' && str1[i] == 'T')) {
            m = m + 1;
        }
        else {
            break;
        }
    }
    if (m == n) {
        return m;//返回个数
    }
    else {
        int mn = n - m;
        int ero = 0;
        for (int i = m; i < n; i++) {
            if (str2[i] != str1[i] && (str2[i] != 'C' || str1[i] != 'T')) {
                ero = ero + 1;
            }
        }

        int start = int(ero / 2);
        int step = ero + 1;


        char read1[200] = "0";
        char read2[200] = "0";
        int temp = 0;
        for (int i = m; i < n; i++) {
            read1[temp] = str1[i];
            read2[temp] = str2[i];
            temp++;
        }
        int score_max = 0;
        int score_num = 0;
        int score_temp = 0;
        vector<vector<int> > dp(mn + 1, vector<int>(mn + 1, 0));
        int left = start - step;
        int right = start;

        for (int i = 1; i < mn + 1; i++)
            dp[i][0] = i;
        for (int j = 0; j < mn + 1; j++)
            dp[0][j] = j;
        for (int i = 1; i < mn + 1; i++) {
            left++;
            right++;




            for (int j = max(1, left); j < min(right, mn + 1); j++) {
                if (j == left) {

                    if (read2[j - 1] == read1[i - 1] || (read2[j - 1] == 'C' && read1[i - 1] == 'T')) {
                        dp[i][j] = dp[i - 1][j - 1];
                    }

                    else {
                        dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + 1;
                    }

                }
                else if (j == right - 1) {
                    if (read2[j - 1] == read1[i - 1] || (read2[j - 1] == 'C' && read1[i - 1] == 'T')) {
                        dp[i][j] = dp[i - 1][j - 1];
                    }

                    else {
                        dp[i][j] = min(dp[i][j - 1], dp[i - 1][j - 1]) + 1;
                    }



                }
                else
                {
                    if (read2[j - 1] == read1[i - 1] || (read2[j - 1] == 'C' && read1[i - 1] == 'T')) {
                        dp[i][j] = dp[i - 1][j - 1];
                    }
                    else {
                        temp = min(dp[i][j - 1], dp[i - 1][j]);
                        dp[i][j] = min(temp, dp[i - 1][j - 1]) + 1;
                    }

                }




            }

            if (dp[i][i] > dp[i - 1][i - 1]) {
                score_temp = score_temp - 5;
            }
            else {
                score_temp = score_temp + 1;
            }
            if (score_temp > score_max) {
                score_max = score_temp;
                /* cout << score_max <<" " <<score_num<< endl;*/
                score_num = i;

            }
            if (score_max - score_temp > mn + 1 - i) {

                return score_num + m;
                break;
            }





        }
        return score_num + m;










    }






}


int duplacation(string readf1, string readf2)

{


    const char* cf1 = readf1.data();
    const char* cf2 = readf2.data();
    ifstream fin1(cf1);
    ifstream fin2(cf2);
    //临时去重输出文件
    ofstream outfile;
    string step1 = "step1";
    step1.append("_");
    step1.append(readf2);
    const char* df1 = step1.data();
    outfile.open(df1, ios::out);

    std::map<string, string> mymap;
    string name;
    string tt;
    string line1;
    string line2;

    int temp = 0;



    //保留前两行
    string ft1;
    string ft2;
    getline(fin1, line1);
    getline(fin2, line2);
    ft1 = line2;
    getline(fin1, line1);
    getline(fin2, line2);
    ft2 = line1;
    ft2.append(" ");
    ft2.append(line2);




    while (getline(fin1, line1) && getline(fin2, line2))
    {

        if (temp % 4 == 2) {
            name = line2;
        }
        if (temp % 4 == 3) {
            tt = line1;
            tt.append(" ");
            tt.append(line2);
            mymap[tt] = name;
        }
        temp++;


    }
    for (std::map<string, string>::iterator it = mymap.begin(); it != mymap.end(); ++it){
        outfile << it->second << endl;
        outfile << it->first << endl;
    }
    outfile << ft1 << endl;
    outfile << ft2 << endl;

    return 0;


}



int main(int argc, char* argv[])
{

    if (argc != 3) {
        cout << "please input read1 and read2 files!" << endl;
        return 0;
    }
    string n1 = argv[1];
    string n2 = argv[2];

    cout << "step1: start remove duplacation " << endl;
    duplacation(n1, n2);
    cout << "step2: start cut reads" << endl;


    
    string step1 = "step1_";
    step1.append(n2);
    const char* df2 = step1.data();

    ifstream file;
    file.open(df2, ios::in);

    string step2 = "cut_";
    step2.append(n2);
    const char* df3 = step2.data();

    ofstream outfile;
    outfile.open(df3, ios::out);




    std::string strLine;
    int hs = 1;
    int dd = 0;
    int temp = 0;
    string name;




    while (getline(file, strLine))
    {

        char rr1[160] = "0";
        char rr2[160] = "0";
        char result[160] = "0";
        char quality[160] = "0";
      
        hs++;
        if (hs % 2 == 0) {
            name = strLine;         
        }
        else{
            temp = 0;
            for (int i = 0; i < strLine.length(); i++) {
                if (strLine[i] != ' ') {
                    rr1[i] = strLine[i];
                }
                else {
                    temp = i;
                    break;
                }
            }
            for (int i = temp + 1; i < strLine.length(); i++) {
                if (strLine[i] != ' ') {
                    rr2[i - temp - 1] = strLine[i];
                }
            }
            dd = cut_levenshtein(rr1, rr2);
            if (dd < 35) {
                continue;
            }

            for (int i = 0; i < dd; i++) {
                result[i] = rr2[i];
                quality[i] ='I';
            }
            outfile << name << endl;
            outfile << result << endl;
            outfile << "+" << endl;
            outfile << quality << endl;
        }
        
        if (hs % 100000 == 0) {
            cout << "cut reads : " << hs << endl;    //测下速度
        }

    }



    string fileName = step1;
    int result = remove(fileName.c_str());
    return 0;

}
