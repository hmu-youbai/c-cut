#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <fstream>
#include <vector>
#include <algorithm>//min()包含头文件
#define max_line 1024     //每行最大字节数
#include <iostream>
#include <fstream>
#include<string>
#include <regex>
using namespace std;











int cut_levenshtein(char* str1, char* str2)
{
    int n, m;
    n = min(strlen(str1), strlen(str2));
    m = 0;
    for (int i = 0; i < n; i++) {
        if (str2[i] == str1[i] || (str2[i] == 'C' && str1[i] == 'T')) {
            m = m + 1;
        }
        else {
            break;
        }
    }
    if (m == n) {
        return m ;//返回个数
    }
    else {
        int mn = n - m;
        int ero = 0;
        for (int i = m; i < n; i++) {
            if (str2[i] != str1[i] && (str2[i] != 'C' || str1[i] != 'T')) {
                ero = ero + 1;
            }
        }

        int start = int(ero / 2);
        int step = ero+1;


        char read1[200] = "0";
        char read2[200] = "0";
        int temp = 0;
        for (int i = m; i < n; i++) {
            read1[temp] = str1[i];
            read2[temp] = str2[i];
            temp++;
        }
        int score_max = 0;
        int score_num = 0;
        int score_temp = 0;
        vector<vector<int> > dp(mn + 1, vector<int>(mn + 1, 0));
        int left = start - step;
        int right = start;

        for (int i = 1; i < mn+1; i++)
            dp[i][0] = i;
        for (int j = 0; j < mn+1; j++)
            dp[0][j] = j;
        for (int i = 1; i < mn+1; i++) {
            left++;
            right++;
            



            for (int j = max(1, left); j < min(right, mn+1); j++) {
                if (j == left) {

                    if (read2[j - 1] == read1[i - 1] || (read2[j - 1] == 'C' && read1[i - 1] == 'T')) {
                        dp[i][j] = dp[i - 1][j - 1];
                    }
   
                    else {
                        dp[i][j] = min(dp[i-1][j], dp[i - 1][j - 1]) + 1;
                    }

                }
                else if(j==right-1){
                    if (read2[j - 1] == read1[i - 1] || (read2[j - 1] == 'C' && read1[i - 1] == 'T')) {
                        dp[i][j] = dp[i - 1][j - 1];
                    }

                    else {
                        dp[i][j] = min(dp[i ][j-1], dp[i - 1][j - 1]) + 1;
                    }



                }
                else
                {
                    if (read2[j - 1] == read1[i - 1] || (read2[j - 1] == 'C' && read1[i - 1] == 'T')) {
                        dp[i][j] = dp[i - 1][j - 1];
                    }
                    else {
                        temp = min(dp[i][j - 1], dp[i - 1][j]);
                        dp[i][j] = min(temp, dp[i - 1][j - 1]) + 1;
                    }

                }




            }
            
            if (dp[i][i] > dp[i - 1][i - 1]) {
                score_temp = score_temp - 5;
            }
            else {
                score_temp = score_temp + 1;
            }
            if (score_temp > score_max) {
                score_max = score_temp;
               /* cout << score_max <<" " <<score_num<< endl;*/
                score_num = i;

            }
            if (score_max - score_temp > mn+1 -i) {
                
                return score_num + m;
                break;
            }
        
        
        
        
        
        }
        return score_num + m;



     
       





    }
            





}



    





int main(void)
{

    ifstream file;
    file.open("222.txt", ios::in);

    ofstream outfile;
    outfile.open("out.txt", ios::out);

    std::string strLine;
    int pp = 0;



    int dd = 0;
    int temp = 0;
    char name[160] = "0";
    char rr1[160] = "0";
    char rr2[160] = "0";

    while (getline(file, strLine))
    {


        temp = 0;
        for (int i = 0; i < strLine.length(); i++) {
            if (strLine[i] != ' ') {
                name[i] = strLine[i];
            }
            else {
                temp = i;
                break;
            }
        }

        for (int i = temp + 1; i < strLine.length(); i++) {
            if (strLine[i] != ' ') {
                rr1[i - temp - 1] = strLine[i];
            }
            else {
                temp = i;
                break;
            }
        }

        for (int i = temp + 1; i < strLine.length(); i++) {
            if (strLine[i] != ' ') {
                rr2[i - temp - 1] = strLine[i];
            }
            else {
                temp = i;
                break;
            }
        }













        dd = cut_levenshtein(rr1, rr2);
        if (dd < 35) {
            continue;
        }

        char result[150] = "0";

        for (int i = 0; i < dd; i++) {
            result[i] = rr2[i];
        }












        pp++;
        if (pp % 10000 == 0) {
            cout << pp << endl;      //测下速度
        }
        outfile << ">" << name << endl;
        outfile << result << endl;


    }
    return 0;

























}

